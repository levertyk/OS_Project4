main(){
    vector<string> his = readHist();
    string line;
    
    while(1){
        cout << pwd() << :~$
        getline(cin, line);
        history.push_back(line);

        if(line == "history")
            printHistory(history);
        else if (line == "pwd")
            cout << pwd;
        else if (line == "exit")
            break();
        else if (pipe() < 0 && isOutDir() < 0 && isInDir < 0)
            fork()
            tokenize
            move to c_str // Assignment
            execvp
            pipe result back to parent
        else if (isOutRead() >= 0)
            cwd parameter > fileName //Part 2 of assignment 3
        else if ( ispipe(line) >= 1)
            int loc = ispipe();
            cmd1 | cmd2
            change std out to be the pipe, then send the output of cmd1 to cmd2
    }

    updatehis(his);

    return 0
}

int pipe(string line){
    look up | and return it's index
    return index, or -1 if not
}

string pwd(){
    return ""

}


__________________________________________________________________


needs to support:
    pwd
    exit
    history
    ls
    ls -l
    ./---
    java ---

    Option: {
        |
        OR
        >
        OR
        <
    }

    extra points for more functions
        extra for multiple pipes

        